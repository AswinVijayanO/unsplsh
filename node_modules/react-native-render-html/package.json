{
  "_args": [
    [
      {
        "raw": "react-native-render-html@~4.1.2",
        "scope": null,
        "escapedName": "react-native-render-html",
        "name": "react-native-render-html",
        "rawSpec": "~4.1.2",
        "spec": ">=4.1.2 <4.2.0",
        "type": "range"
      },
      "/home/aswin/react-native/unsplsh/node_modules/@shoutem/ui"
    ]
  ],
  "_from": "react-native-render-html@~4.1.2",
  "_hasShrinkwrap": false,
  "_id": "react-native-render-html@4.1.2",
  "_location": "/react-native-render-html",
  "_nodeVersion": "8.10.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-native-render-html_4.1.2_1551429229645_0.43273098301975477"
  },
  "_npmUser": {
    "name": "exilz",
    "email": "m.bertonnier@gmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {
    "domelementtype": "1.3.1",
    "domhandler": "2.4.2",
    "domutils": "1.7.0",
    "entities": "1.1.2",
    "inherits": "2.0.4",
    "string_decoder": "1.1.1",
    "util-deprecate": "1.0.2"
  },
  "_requested": {
    "raw": "react-native-render-html@~4.1.2",
    "scope": null,
    "escapedName": "react-native-render-html",
    "name": "react-native-render-html",
    "rawSpec": "~4.1.2",
    "spec": ">=4.1.2 <4.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@shoutem/ui"
  ],
  "_resolved": "https://registry.npmjs.org/react-native-render-html/-/react-native-render-html-4.1.2.tgz",
  "_shasum": "dfd06ac7e87ed68b6421750e88dd7895d284935b",
  "_shrinkwrap": null,
  "_spec": "react-native-render-html@~4.1.2",
  "_where": "/home/aswin/react-native/unsplsh/node_modules/@shoutem/ui",
  "author": {
    "name": "Archriss"
  },
  "bugs": {
    "url": "https://github.com/archriss/react-native-render-html/issues"
  },
  "dependencies": {
    "buffer": "^4.5.1",
    "events": "^1.1.0",
    "html-entities": "^1.2.0",
    "htmlparser2": "^3.10.1"
  },
  "description": "React Native component that renders HTML as native views",
  "devDependencies": {
    "babel-eslint": "8.2.2",
    "eslint": "4.18.2",
    "eslint-config-standard": "11.0.0",
    "eslint-config-standard-jsx": "5.0.0",
    "eslint-config-standard-react": "6.0.0",
    "eslint-plugin-import": "2.9.0",
    "eslint-plugin-node": "6.0.1",
    "eslint-plugin-promise": "3.7.0",
    "eslint-plugin-react": "7.7.0",
    "eslint-plugin-standard": "3.0.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-lIW7GfNCsqOzdv0hxiZms24uC9Hu8hqufMyD4FBjfs8HSc4pUKnvBgOljiqEXmjGhDEJM6oY7QGglAV0hL69bQ==",
    "shasum": "dfd06ac7e87ed68b6421750e88dd7895d284935b",
    "tarball": "https://registry.npmjs.org/react-native-render-html/-/react-native-render-html-4.1.2.tgz",
    "fileCount": 24,
    "unpackedSize": 94048,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJceO5uCRA9TVsSAnZWagAApjYP/0NFde3/8ZwmE0ycJ/Xs\n4M0wKVRYtQ4Vgy8Vk4gdCbxGKgWgxj+EtUyYibHyuDM0KOzx7jYnjEe97FUn\nh5mYV+hnd7z9cB1LMv9AFbhDLwGtzaUQ9pJuPgtkRRS23cVElFsdqwBnnQGb\nloDZKLXiTsUqZg1809fSUP2ZTatGKdQxmaXVPsvxQU+nNwGFkQcC2RMZXSzZ\nuR43gukS87k1fkSpug7NQgxeOHd2noGXaPLddAn0oxl/fssXNCmyPXoh4oOP\n0uaPDXBimVESr/FO/etZdfphS58rfh4XdlpyiMLY3ByPtNpB0+qTY2yQ1DoH\nSEwcWWGkwnWoCkAtOi6oPKvarPs6VNS+PHrWDbzrxjIctMw6PBaN2vKY8qvU\nWSuXRZxNPWZ1d+YJ1y67yQszjQHGilEoEBbe1NyOpViqXyPEeHK20KB81ZRH\nGH8eGt7PG3DPybKgIPoTrBYl/ggKhloy175AL/L3UWOk64cEKEhCu2UBHXTO\nY6ADKdWY+6O7GRAq0kC+yKqItAROxQfjENDb644aQ5l0tCW3EnV8RRh/xTZD\nQoB7jmmWnwCYrSY+mNamfF2nLuWojE5OAV+ethL8aRhoPaQEruIy941+ZMIJ\n4EwBCRlecwBNt0ZSpc5ekWfH2Y5gYSseB6jm+zbx2fBFKhxzHU27btdukIHk\nHygr\r\n=KPQ+\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "def7c70aa10e28018f62f6471037ae24cdd1913b",
  "homepage": "https://github.com/archriss/react-native-render-html#readme",
  "keywords": [
    "react-native",
    "react-component",
    "react-native-component",
    "html",
    "render-html"
  ],
  "license": "BSD-2-Clause",
  "maintainers": [
    {
      "name": "bd-arc",
      "email": "bdelmaire@archriss.com"
    },
    {
      "name": "exilz",
      "email": "m.bertonnier@gmail.com"
    }
  ],
  "name": "react-native-render-html",
  "optionalDependencies": {},
  "peerDependencies": {
    "prop-types": ">=15.5.10",
    "react": "*",
    "react-native": "*"
  },
  "readme": "# react-native-render-html\n\nAn iOS/Android pure javascript react-native component that renders your HTML into 100% native views. It's made to be extremely customizable and easy to use and aims at being able to render anything you throw at it.\n\n> Based on the original work of [Thomas Beverley](https://github.com/Thomas101), props to him.\n\n![platforms](https://img.shields.io/badge/platforms-Android%20%7C%20iOS-brightgreen.svg?style=flat-square&colorB=191A17)\n[![npm](https://img.shields.io/npm/v/react-native-render-html.svg?style=flat-square)](https://www.npmjs.com/package/react-native-render-html)\n[![npm](https://img.shields.io/npm/dm/react-native-render-html.svg?style=flat-square&colorB=007ec6)](https://www.npmjs.com/package/react-native-render-html)\n<!-- [![github release](https://img.shields.io/github/release/archriss/react-native-render-html.svg?style=flat-square)](https://github.com/archriss/react-native-render-html/releases) -->\n[![github issues](https://img.shields.io/github/issues/archriss/react-native-render-html.svg?style=flat-square)](https://github.com/archriss/react-native-render-html/issues)\n[![github closed issues](https://img.shields.io/github/issues-closed/archriss/react-native-render-html.svg?style=flat-square&colorB=44cc11)](https://github.com/archriss/react-native-render-html/issues?q=is%3Aissue+is%3Aclosed)\n\n![react-native-render-html](http://i.giphy.com/26tkmjBLvThP0TSak.gif)\n\n## Table of contents\n\n- [react-native-render-html](#react-native-render-html)\n  - [Table of contents](#table-of-contents)\n  - [Install](#install)\n  - [Basic usage](#basic-usage)\n  - [Props](#props)\n  - [Demo](#demo)\n  - [Creating custom renderers](#creating-custom-renderers)\n    - [Custom HTML tags](#custom-html-tags)\n    - [Making your custom component block or inline](#making-your-custom-component-block-or-inline)\n    - [Lists prefixes](#lists-prefixes)\n  - [Styling](#styling)\n  - [Images](#images)\n  - [Altering content](#altering-content)\n    - [alterData](#alterdata)\n    - [alterChildren](#alterchildren)\n    - [alterNode](#alternode)\n    - [onParsed](#onparsed)\n  - [Ignoring HTML content](#ignoring-html-content)\n  - [Useful functions](#useful-functions)\n\n## Install\n\n`npm install react-native-render-html --save` or `yarn add react-native-render-html`\n\n## Basic usage\n\n```javascript\nimport React, { Component } from 'react';\nimport { ScrollView, Dimensions } from 'react-native';\nimport HTML from 'react-native-render-html';\n\nconst htmlContent = `\n    <h1>This HTML snippet is now rendered with native components !</h1>\n    <h2>Enjoy a webview-free and blazing fast application</h2>\n    <img src=\"https://i.imgur.com/dHLmxfO.jpg?2\" />\n    <em style=\"textAlign: center;\">Look at how happy this native cat is</em>\n`;\n\nexport default class Demo extends Component {\n    render () {\n        return (\n            <ScrollView style={{ flex: 1 }}>\n                <HTML html={htmlContent} imagesMaxWidth={Dimensions.get('window').width} />\n            </ScrollView>\n        );\n    }\n}\n```\n\n## Props\n\nProp | Description | Type | Required/Default\n------ | ------ | ------ | ------\n`renderers` | Your [custom renderers](#creating-custom-renderers) | `object` | Optional, some default ones are supplied (`<a>`, `<img>`...)\n`renderersProps` | Set of props accessible into your [custom renderers](#creating-custom-renderers) in `passProps` (4th argument) | `object` | Optional\n`html` | HTML string to parse and render | `string` | Required\n`uri` | *(experimental)* remote website to parse and render | `string` | Optional\n`decodeEntities` | Decode HTML entities of your content | `bool` | Optional, defaults to `true`\n`imagesMaxWidth` | Resize your images to this maximum width, see [images](#images) | `number` | Optional\n`staticContentMaxWidth` | Set a maximum width to non-responsive content (`<iframe> for instance`) | `number` | Optional\n`imagesInitialDimensions` | Default width and height to display while image's dimensions are being retrieved, see [images](#images) | `{ width: 100, height: 100 }` | Optional\n`onLinkPress` | Fired with the event, the href and an object with all attributes of the tag as its arguments when tapping a link | `function` | Optional\n`onParsed` | Fired when your HTML content has been parsed. Also useful to tweak your rendering, see [onParsed](#onparsed) | `function` | Optional\n`tagsStyles` | Provide your styles for specific HTML tags, see [styling](#styling) | `object` | Optional\n`classesStyles` | Provide your styles for specific HTML classes, see [styling](#styling) | `object` | Optional\n`listsPrefixesRenderers` | Your custom renderers from `ul` and `ol` bullets, see [lists prefixes](#lists-prefixes) | `object` | Optional\n`containerStyle` | Custom style for the default container of the renderered HTML | `object` | Optional\n`customWrapper` | Replace the default wrapper with a function that takes your content as the first parameter | `function` | Optional\n`remoteLoadingView` | Replace the default loader while fetching a remote website's content | `function` | Optional\n`remoteErrorView` | Replace the default error if a remote website's content could not be fetched | `function` | Optional\n`emSize` | The default value in pixels for `1em` | `number` | `14`\n`ptSize` | The default value in pixels for `1pt` | `number` | `1.3`\n`baseFontStyle` | The default style applied to `<Text>` components | `object` | `{ fontSize: 14 }`\n`allowFontScaling` | Specifies whether fonts should scale to respect Text Size accessibility settings | `boolean` | `true`\n`textSelectable` | Allow all texts to be selected | `boolean` | `false`\n`alterData` | Target some specific texts and change their content, see [altering content](#altering-content) | `function` | Optional\n`alterChildren` | Target some specific nested children and change them, see [altering content](#altering-content) | `function` | Optional\n`alterNode` | Target a specific node and change it, see [altering content](#altering-content) | `function` | Optional\n`ignoredTags` | HTML tags you don't want rendered, see [ignoring HTML content](#ignoring-html-content) | `array` | Optional, `['head', 'scripts', ...]`\n`allowedStyles`| Allow render only certain CSS style properties and ignore every other. If you have some property both in `allowedStyles` and `ignoredStyles`, it will be ignored anyway. | `array` | Optional, everything is allowed by default\n`ignoredStyles` | CSS styles from the `style` attribute you don't want rendered, see [ignoring HTML content](#ignoring-html-content) | `array` | Optional\n`ignoreNodesFunction` | Return true in this custom function to ignore nodes very precisely, see [ignoring HTML content](#ignoring-html-content) | `function` | Optional\n`debug` | Prints the parsing result from htmlparser2 and render-html after the initial render | `bool` | Optional, defaults to `false`\n\n## Demo\n\nThis component comes with a demo that showcases every feature presented here. It's very useful to keep track of bugs and rendering differences between the different versions of react-native.\n\n**It is mandatory** to refer to an example of the demo or to provide one when submitting an issue or a pull request for a new feature.\n\nFeel free to write more advanced examples and submit a pull-request for it, it will probably be very useful for other users.\n\n## Creating custom renderers\n\nThis is very useful if you want to make some very specific styling of your HTML content, or even implement custom HTML tags.\n\n### Custom HTML tags\n\nJust pass an object to the `renderers` prop with the tag name as the key, an a function as its value, like so :\n\n```javascript\nrenderers: {\n    hr: () => <View style={{ width: '100%', height: 1, backgroundColor: 'blue' }} />\n}\n```\n\nHere, we have overriden the default `<hr />` renderer and made it a blue line.\n\nYou can also create your own tags and use them in your HTML content :\n\n```javascript\nconst content = `<bluecircle></bluecircle>`;\n...\n\nrenderers: {\n    bluecircle: () => <View style={{ width: 20, height: 20, borderRadius: 10, backgroundColor: 'blue' }} />\n}\n```\n\nYour renderers functions receive several arguments that will be very useful to make some very specific rendering.\n\n* `htmlAttribs`: attributes attached to the node, parsed in a react-native way\n* `children` : array with the children of the node\n* `convertedCSSStyles` : conversion of the `style` attribute from CSS to react-native's stylesheet\n* `passProps` : various useful information :  your `renderersProps`, `groupInfo`, `parentTagName`, `parentIsText`...\n\n### Making your custom component block or inline\n\nBy default, a custom renderer behaves like a block. So if you're rendering it between texts inside a `<p>`, you'll break your line.\n\nIf you want it to be inline, you can slightly change the way you declare it, like this :\n\n```javascript\nrenderers: {\n    mytag: { renderer: myTagRenderer, wrapper: 'Text' }, // new way, is inline\n    myothertag: myOtherTagRenderer // old regular way (still valid, behaves like a block)\n}\n```\n\n> Note : the only values for `wrapper` are `Text` or `View` (default). Those don't represent the `<View>` and `<Text>` component of react-native but are instead used in the parser to prevent crashes and properly render every HTML markup.\n\n### Lists prefixes\n\nThe default renderer of the `<ul>` and `<ol>` tags will either render a bullet or the count of your elements. If you wish to change this without having to re-write the whole list rendering implementation, you can use the `listsPrefixesRenderers` prop.\n\nJust like with the `renderers` prop, supply an object with `ul` and/or `ul` as functions that receive the [same arguments as your custom HTML tags](#custom-html-tags). For instance, you can swap the default black bullet of `<ul>` with a blue cross :\n\n```javascript\n// ... your props\nul: (htmlAttribs, children, convertedCSSStyles, passProps) => {\n    return (\n        <Text style={{ color: 'blue', fontSize: 16 }}>+</Text>\n    );\n}\n```\n\n## Styling\n\nIn addition to your custom renderers, you can apply specific styles to HTML tags (`tagsStyles`) or HTML classes (`classesStyles`). You can also combine these styles with your custom renderers.\n\nStyling options override themselves, so you might render a custom HTML tag with a [custom renderer](#creating-custom-renderers) like `<bluecircle>`, make it green with a class `<bluecircle class=\"make-me-green\">` or make it red by styling the tag itself.\n\nThe default style of your custom renderer will be merged to the one from your `classesStyles` which will also be merged by the `style` attribute.\n\n> **IMPORTANT NOTE : Do NOT use the `StyleSheet` API to create the styles you're going to feed to `tagsStyle` and `classesStyles`. Although it might look like it's working at first, the caching logic of `react-native` makes it impossible for this module to deep check each of your style to properly apply the precedence and priorities of your nested tags' styles.**\n\nHere's a usage example\n\n```javascript\n// props\n    tagsStyles: { i: { textAlign: 'center', fontStyle: 'italic', color: 'grey' } },\n    classesStyles: { 'last-paragraph': { textAlign: 'right', color: 'teal', fontWeight: '800' } }\n\nconst html = `\n    <i>Here, we have a style set on the \"i\" tag with the \"tagsStyles\" prop.</i>\n    <p class=\"last-paragraph\">Finally, this paragraph is styled through the classesStyles prop</p>`;\n```\n\n![](https://puu.sh/xF7Jx/e4b395975d.png)\n\n## Images\n\nBy default, unstyled images will be rendered with their respective height and width without resizing. You can force their dimensions by using the `style` attribute in your HTML content or [style](#styling) them with a class or through the `<img>` tag.\n\nIf you can't set the dimension of each image in your content, you might find the `imagesMaxWidth` prop useful. It resizes (and keeps proportions) your images to a maximum width, ensuring that your images won't overflow out of your viewport.\n\nA nice trick, demonstrated in the [basic usage of this module](#basic-usage) is to use the `Dimensions` API of react-native : `imagesMaxWidth={Dimensions.get('window').width}`. You could subtract a value to it to make a margin.\n\nPlease note that if you set width AND height through any mean of styling, `imagesMaxWidth` will be ignored.\n\nBefore their dimensions have been properly retrieved, images will temporarily be rendered in 100px wide squares. You can override this default value with prop `imagesInitialDimensions`.\n\nImages with broken links will render an empty square with a thin border, similar to what safari renders in a webview.\n\nPlease note that all of these behaviors are implemented in the default `<img>` renderer. If you want to provide your own `<img>` renderer, you'll have to make this happen by yourself. You can use the `img` function in `HTMLRenderers.js` as a starting point.\n\n## Altering content\n\n`alterData` and `alterChildren` props are very useful to make some modifications on the structure of your HTML before it's actually rendered with react components.\n\nThey both are functions that receive the parsed `node` as their first and only parameter. You must return your changes: a `string` with `alterData` and an `array` with `alterChildren` or a falsy value if you don't need to change anything.\n\n### alterData\n\n`alterData` allows you to change the text content of your nodes. For instance, you can customize the content of `<h1>` and `<h2>` to render your titles in uppercase.\n\nHere's how you would do that :\n\n```javascript\n// ... your props\nalterData: (node) => {\n    let { parent, data } = node;\n    if (parent && parent.name === 'h1') {\n        // Texts elements are always children of wrappers, this is why we check the tag\n        // with \"parent.name\" and not \"name\"\n        return data.toUpperCase();\n    }\n    // Don't return anything (eg a falsy value) for anything else than the <h1> tag so nothing is altered\n}\n```\n\n### alterChildren\n\n`alterChildren` allows you to change the children wrapped in any node. For instance, you might want to change the content of a list.\n\nHere's an example :\n\n```javascript\n// ... your props\nalterChildren: (node) => {\n    const { children, name } = node;\n    if (name === 'ol' && children && children.length) {\n        // Keep only the first two elements of the list\n        return children.splice(0, 2);\n    }\n    // Don't return anything (eg a falsy value) for anything else than the <ol> tag so nothing is altered\n}\n```\n\n### alterNode\n\n`alterNode` allows you to change the values parsed from your HTML before it's rendered. It's extremely powerful as a last resort to add some very specific styling or circumvent rendering problems.\n\nHere's an advanced example where you would change the color of links inside a `<blockquote>` :\n\n```javascript\nalterNode: (node) => {\n    const { name, parent } = node;\n    // If the tag is an <a> and we've found a parent to be a blockquote\n    // (see the utils part of this documentation to know more about getParentsTagsRecursively)\n    if (name === 'a' && getParentsTagsRecursively(parent).indexOf('blockquote') !== -1) {\n        // Let's assign a specific color to the node's attribs (if there already are)\n        node.attribs = { ...(node.attribs || {}), style: `color:lightblue;` };\n        return node;\n    }\n    // Don't return anything (eg a falsy value) for anything else so nothing is altered\n}\n```\n\n### onParsed\n\n`onParsed` is a callback and lets you know when your HTML has been parsed. Its first argument is the `dom` array from htmlparser2, its second is `RNElements` which is the result of the parsing of this module.\n\nIf you want to tweak the parsed values, you can change `RNElements` and return it. For instance, you could insert one of your custom component although it was not in your HTML content, like this :\n\n```javascript\nonHTMLParsed = (dom, RNElements) => {\n    // Find the index of the first paragraph\n    const ad = {\n        wrapper: 'View',\n        tagName: 'mycustomblock',\n        attribs: {},\n        parent: false,\n        parentTag: false,\n        nodeIndex: 4\n    };\n    // Insert the component\n    RNElements.splice(4, 0, ad);\n    return RNElements;\n}\n```\n\n## Ignoring HTML content\n\nYou can't expect native components to be able to render *everything* you can find in your browser. And you might not entirely trust your contributors, so here are 3 props allowing you to prevent disasters without sanitizing your HTML on the server-side (that doesn't mean you shouldn't !).\n\n* `ignoredTags` : array of ignored HTML tags, by default `head` and `scripts` are removed\n* `ignoredStyles` : array of ignored CSS rules. Nothing is ignored by default\n* `ignoreNodesFunction` : this is a cumbersome, yet powerful, way of ignoring very specific stuff.\n\n**Please note** that if you supply `ignoredTags`, you will override the default ignored ones. There are *a lot* of them, if you want to keep them and add your own, you can do something like :\n\n```javascript\nimport { IGNORED_TAGS } from 'react-native-render-html/src/HTMLUtils';\n...\n\n// your props\nignoredTags={[ ...IGNORED_TAGS, 'tag1', 'tag2']}\n```\n\n`ignoreNodesFunction` receives 3 parameters : `node`, `parentTagName` and `parentIsText`.\n\n`node` is the result of the HTML parsing, which allows you to look for children, check the parent's markup and much more. `parentTagName` is a convenient way to access the parent of your node, and `parentIsText` is a great way to make sure you won't be rendering a `<View>` inside a `<Text>` which, right now, makes react-native crash.\n\n## Useful functions\n\nThe API is exposing some functions you can use to write advanced behaviors more easily.\nYou can import them like so :\n\n```javascript\nimport { functionName } from 'react-native-render-html/src/HTMLUtils';\n```\n\n* `getParentsTagsRecursively(node)`\n    * Description : Returns an array with the tagname of every parent of a node or an empty array if nothing is found.\n    * Parameters : - `node` : a parsed HTML node from `alterChildren` for example\n    * Returns : An empty array or an array of strings.\n    * Notes : this is very useful to check if a node is nested in a specific parent. See [alterNode](#alterNode) for an advanced example.\n* `getClosestNodeParentByTag(node, tag)`\n    * Description: Returns the closest parent of a node with a specific tag.\n    * Parameters : - `node` : a parsed HTML node from `alterChildren` for example\n    * Returns : An HTML node if found.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/archriss/react-native-render-html.git"
  },
  "version": "4.1.2"
}
