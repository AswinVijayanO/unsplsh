{
  "_args": [
    [
      {
        "raw": "react-native-swipe-gestures@^1.0.3",
        "scope": null,
        "escapedName": "react-native-swipe-gestures",
        "name": "react-native-swipe-gestures",
        "rawSpec": "^1.0.3",
        "spec": ">=1.0.3 <2.0.0",
        "type": "range"
      },
      "/home/aswin/react-native/unsplsh"
    ]
  ],
  "_from": "react-native-swipe-gestures@^1.0.3",
  "_hasShrinkwrap": false,
  "_id": "react-native-swipe-gestures@1.0.3",
  "_location": "/react-native-swipe-gestures",
  "_nodeVersion": "8.11.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-native-swipe-gestures_1.0.3_1543309618468_0.6093194254673662"
  },
  "_npmUser": {
    "name": "sverps",
    "email": "sverps@gmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-native-swipe-gestures@^1.0.3",
    "scope": null,
    "escapedName": "react-native-swipe-gestures",
    "name": "react-native-swipe-gestures",
    "rawSpec": "^1.0.3",
    "spec": ">=1.0.3 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-native-swipe-gestures/-/react-native-swipe-gestures-1.0.3.tgz",
  "_shasum": "4160f8d459627323f3a3d2770af4bcd82fd054f5",
  "_shrinkwrap": null,
  "_spec": "react-native-swipe-gestures@^1.0.3",
  "_where": "/home/aswin/react-native/unsplsh",
  "author": {
    "name": "Goran Lepur",
    "email": "goran.lepur1@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/glepur/react-native-swipe-gestures/issues"
  },
  "dependencies": {},
  "description": "4-directional swipe gestures for react-native",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "integrity": "sha512-KOouRzPB2fHFjVombsSdRfYo8SFeNVa4Ho4B5il87DuuF26sPNOtb3je+qaT/xVptedOsCzRPJGbWFMsaBApgg==",
    "shasum": "4160f8d459627323f3a3d2770af4bcd82fd054f5",
    "tarball": "https://registry.npmjs.org/react-native-swipe-gestures/-/react-native-swipe-gestures-1.0.3.tgz",
    "fileCount": 5,
    "unpackedSize": 9554,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJb/QkzCRA9TVsSAnZWagAA2FkP/3hSqEf7DHX+cRRDoz9x\nANpqxAELDzmABLfsGVFLsJw1YXq1aEUSfi0CL52zt+56DwDKu4fgw3DaYqWj\n+0S1aCxWFfaWEtmXMcnj05U59Ngc2ff6YEuHIr2vVZenMwTvQfYtsrKaZAJp\nHTVHK1ffpFaFmB2dRcnJRnKhnOFbgUR1G7A6Daz3DytBNmyUKYAXN5xF5mXh\nemg5RlCJBWLDjw2E6TfkT0Ohha+2TDeygX+dKwFaO0HlPkSLPQIjFBG0VSx8\nmbmaCcpODVU8p0zVeSlTBVyAQ+ZD3qinQHqrqdfoxCV/yp/HcT+hsb6ywlhu\nmH2VXVwVEshNBbI7jQ4iqLEVO92yzBOzGyzRnLjJTU6Zh+Z7/IvoPJYYp8+o\nU/PuAU9b1aPqL7Hdmo3tan3ZfYSwSXH81+tDA+EBsfN0moR8IJ8RgGkfIZtv\nX20/RreGliuP9Y6hjSd0iKJbio2pORr0ut5ycQak0cqgQ2AOsyLbqZ51hvD+\nWPngikXXxPjPC9GnT2B1QfnoBn6dRjgzvW53a/66p6XDb/Sd67tmeNA2wyhl\ngL6IOMFTwHcoXeGFX+UKUKQfRzisyctGqU2F/TPbBxRD4Abvy5YwFf3IUVSt\nQjwFZwBmObbkesZMxk9mjwn8VMkKzRWJ0netICqS0sYHY6oqCfB5M3VeZQ7J\nyscu\r\n=h0yS\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "0b227c22cc55da654cd7724e60003bc2b4a03af4",
  "homepage": "https://github.com/glepur/react-native-swipe-gestures#readme",
  "keywords": [
    "react-native",
    "swipe",
    "gesture"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "glepur",
      "email": "goran.lepur1@gmail.com"
    }
  ],
  "name": "react-native-swipe-gestures",
  "optionalDependencies": {},
  "readme": "# react-native-swipe-gestures\n\nReact Native component for handling swipe gestures in up, down, left and right direction.\n\n## Installation\n\n`npm i -S react-native-swipe-gestures`\n\n## Usage\n\n```javascript\n'use strict';\n\nimport React, {Component} from 'react';\nimport {View, Text} from 'react-native';\nimport GestureRecognizer, {swipeDirections} from 'react-native-swipe-gestures';\n\nclass SomeComponent extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      myText: 'I\\'m ready to get swiped!',\n      gestureName: 'none',\n      backgroundColor: '#fff'\n    };\n  }\n\n  onSwipeUp(gestureState) {\n    this.setState({myText: 'You swiped up!'});\n  }\n\n  onSwipeDown(gestureState) {\n    this.setState({myText: 'You swiped down!'});\n  }\n\n  onSwipeLeft(gestureState) {\n    this.setState({myText: 'You swiped left!'});\n  }\n\n  onSwipeRight(gestureState) {\n    this.setState({myText: 'You swiped right!'});\n  }\n\n  onSwipe(gestureName, gestureState) {\n    const {SWIPE_UP, SWIPE_DOWN, SWIPE_LEFT, SWIPE_RIGHT} = swipeDirections;\n    this.setState({gestureName: gestureName});\n    switch (gestureName) {\n      case SWIPE_UP:\n        this.setState({backgroundColor: 'red'});\n        break;\n      case SWIPE_DOWN:\n        this.setState({backgroundColor: 'green'});\n        break;\n      case SWIPE_LEFT:\n        this.setState({backgroundColor: 'blue'});\n        break;\n      case SWIPE_RIGHT:\n        this.setState({backgroundColor: 'yellow'});\n        break;\n    }\n  }\n\n  render() {\n    \n    const config = {\n      velocityThreshold: 0.3,\n      directionalOffsetThreshold: 80\n    };\n\n    return (\n      <GestureRecognizer\n        onSwipe={(direction, state) => this.onSwipe(direction, state)}\n        onSwipeUp={(state) => this.onSwipeUp(state)}\n        onSwipeDown={(state) => this.onSwipeDown(state)}\n        onSwipeLeft={(state) => this.onSwipeLeft(state)}\n        onSwipeRight={(state) => this.onSwipeRight(state)}\n        config={config}\n        style={{\n          flex: 1,\n          backgroundColor: this.state.backgroundColor\n        }}\n        >\n        <Text>{this.state.myText}</Text>\n        <Text>onSwipe callback received gesture: {this.state.gestureName}</Text>\n      </GestureRecognizer>\n    );\n  }\n}\n\nexport default SomeComponent;\n```\n\n## Config\n\nCan be passed within optional `config` property.\n\n| Params                     | Type          | Default | Description  |\n| -------------------------- |:-------------:| ------- | ------------ |\n| velocityThreshold          | Number        | 0.3     | Velocity that has to be breached in order for swipe to be triggered (`vx` and `vy` properties of `gestureState`) |\n| directionalOffsetThreshold | Number        | 80      | Absolute offset that shouldn't be breached for swipe to be triggered (`dy` for horizontal swipe, `dx` for vertical swipe) |\n| gestureIsClickThreshold    | Number        | 5       | Absolute distance that should be breached for the gesture to not be considered a click (`dx` or `dy` properties of `gestureState`) |\n\n## Methods\n\n#### onSwipe(gestureName, gestureState)\n\n| Params        | Type          | Description  |\n| ------------- |:-------------:| ------------ |\n| gestureName   | String        | Name of the gesture (look example above) |\n| gestureState  | Object        | gestureState received from PanResponder  |\n\n\n#### onSwipeUp(gestureState)\n\n| Params        | Type          | Description  |\n| ------------- |:-------------:| ------------ |\n| gestureState  | Object        | gestureState received from PanResponder  |\n\n#### onSwipeDown(gestureState)\n\n| Params        | Type          | Description  |\n| ------------- |:-------------:| ------------ |\n| gestureState  | Object        | gestureState received from PanResponder  |\n\n#### onSwipeLeft(gestureState)\n\n| Params        | Type          | Description  |\n| ------------- |:-------------:| ------------ |\n| gestureState  | Object        | gestureState received from PanResponder  |\n\n#### onSwipeRight(gestureState)\n\n| Params        | Type          | Description  |\n| ------------- |:-------------:| ------------ |\n| gestureState  | Object        | gestureState received from PanResponder  |\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/glepur/react-native-swipe-gestures.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "1.0.3"
}
